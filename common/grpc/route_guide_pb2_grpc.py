# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import route_guide_pb2 as route__guide__pb2


class RoutesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.LogMeasurementRoute = channel.stream_unary(
                '/Routes/LogMeasurementRoute',
                request_serializer=route__guide__pb2.LogMeasurementRequest.SerializeToString,
                response_deserializer=route__guide__pb2.Empty.FromString,
                )
        self.RegisterAntennaRoute = channel.unary_unary(
                '/Routes/RegisterAntennaRoute',
                request_serializer=route__guide__pb2.RegisterAntennaRequest.SerializeToString,
                response_deserializer=route__guide__pb2.RegisterAntennaResponse.FromString,
                )
        self.GetAntennasRoute = channel.unary_unary(
                '/Routes/GetAntennasRoute',
                request_serializer=route__guide__pb2.Empty.SerializeToString,
                response_deserializer=route__guide__pb2.GetAntennasResponse.FromString,
                )
        self.GetLocationsRoute = channel.unary_unary(
                '/Routes/GetLocationsRoute',
                request_serializer=route__guide__pb2.GetLocationsRequest.SerializeToString,
                response_deserializer=route__guide__pb2.GetLocationsResponse.FromString,
                )
        self.GetLocationMeasurementsRoute = channel.unary_unary(
                '/Routes/GetLocationMeasurementsRoute',
                request_serializer=route__guide__pb2.LocationMeasurementsRequest.SerializeToString,
                response_deserializer=route__guide__pb2.LocationMeasurementsResponse.FromString,
                )


class RoutesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def LogMeasurementRoute(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RegisterAntennaRoute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAntennasRoute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLocationsRoute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLocationMeasurementsRoute(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RoutesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'LogMeasurementRoute': grpc.stream_unary_rpc_method_handler(
                    servicer.LogMeasurementRoute,
                    request_deserializer=route__guide__pb2.LogMeasurementRequest.FromString,
                    response_serializer=route__guide__pb2.Empty.SerializeToString,
            ),
            'RegisterAntennaRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterAntennaRoute,
                    request_deserializer=route__guide__pb2.RegisterAntennaRequest.FromString,
                    response_serializer=route__guide__pb2.RegisterAntennaResponse.SerializeToString,
            ),
            'GetAntennasRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAntennasRoute,
                    request_deserializer=route__guide__pb2.Empty.FromString,
                    response_serializer=route__guide__pb2.GetAntennasResponse.SerializeToString,
            ),
            'GetLocationsRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLocationsRoute,
                    request_deserializer=route__guide__pb2.GetLocationsRequest.FromString,
                    response_serializer=route__guide__pb2.GetLocationsResponse.SerializeToString,
            ),
            'GetLocationMeasurementsRoute': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLocationMeasurementsRoute,
                    request_deserializer=route__guide__pb2.LocationMeasurementsRequest.FromString,
                    response_serializer=route__guide__pb2.LocationMeasurementsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Routes', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Routes(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def LogMeasurementRoute(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Routes/LogMeasurementRoute',
            route__guide__pb2.LogMeasurementRequest.SerializeToString,
            route__guide__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RegisterAntennaRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Routes/RegisterAntennaRoute',
            route__guide__pb2.RegisterAntennaRequest.SerializeToString,
            route__guide__pb2.RegisterAntennaResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAntennasRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Routes/GetAntennasRoute',
            route__guide__pb2.Empty.SerializeToString,
            route__guide__pb2.GetAntennasResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLocationsRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Routes/GetLocationsRoute',
            route__guide__pb2.GetLocationsRequest.SerializeToString,
            route__guide__pb2.GetLocationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLocationMeasurementsRoute(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Routes/GetLocationMeasurementsRoute',
            route__guide__pb2.LocationMeasurementsRequest.SerializeToString,
            route__guide__pb2.LocationMeasurementsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
